{"version":3,"file":"_email.controller.js","names":["_mailer","require","_verification","_bcryptjs","_interopRequireDefault","_models","_sequelize","path","op","seq","Op","createMail","req","res","email_sender","email_receiver","email_subject","email_body_html","body","console","log","Date","addMinutes","now","db","Token","unscoped","findAll","attributes","where","user_id","then","result","token_uniqueString","status","json","token","catch","error","mensaje","success","exports","approveUserEmail","verifyEmail","userId","uniqueString","params","tokenByUserId","token_expiredAt","hashedUniqueString","deletedVerificationToken","destroy","deletedUserNoValidated","User","message","redirect","concat","bcrypt","compare","userUpdateVerification","update","user_verified","sendFile","join","__dirname","verifyToDeletedEmail","userDeleted","updateToForgotPsw","passwordGenerated","Math","random","toString","slice","user_password","encryptPassword","userUpdated","verifyEmailPage","verifyEmailDeletePage","forgotPswPage","date","minutes","setMinutes","getMinutes"],"sources":["../../src/controllers/_email.controller.js"],"sourcesContent":["import { transporter } from \"../mail/config/mailer\"\r\nimport { sendVerificationEmail } from \"../mail/utils/verification\"\r\nconst path = require('node:path'); \r\nimport bcrypt from \"bcryptjs\";\r\nimport db from \"../database/models\";\r\nimport seq from \"sequelize\";\r\nconst op = seq.Op;\r\n\r\nexport const createMail = async ( req, res ) => {\r\n  try {\r\n    const { email_sender, email_receiver, email_subject, email_body_html } = req.body;\r\n\r\n    console.log(\"newDate\", new Date(), \"addedTime\", addMinutes(new Date(), 5), \"dateNow\", Date.now())\r\n\r\n    db.Token.unscoped().findAll({ attributes: [ 'token_uniqueString', 'token_expiredAt', 'token_createdAt', 'token_updatedAt', 'token_deletedAt' ], where: { user_id: 91 }})\r\n    .then((result) => {\r\n      console.log(result[0].token_uniqueString)\r\n      res.status(200).json({ token: result })\r\n    })\r\n    .catch((error) => {\r\n      console.log(error)\r\n      res.status(400).json({error: error});\r\n    })\r\n\r\n    // send mail with defined transport object\r\n    /*\r\n    const info = await transporter.sendMail({\r\n      from: process.env.AUTH_EMAIL, // sender address\r\n      to: email_receiver ? email_receiver : \"douglasskick@gmail.com\", // list of receivers\r\n      subject: email_subject, // Subject line\r\n      html: email_body_html, // html body\r\n    });\r\n    console.log(\"Message sent: %s\", info.messageId);\r\n    */\r\n    //return res.status(200).json({ mensaje: \"Mensaje enviado con éxito\", success: true, dateNow: new Date(), dateAdded: addMinutes(new Date(), 5) })\r\n  } catch( error ) {\r\n    console.log(error)\r\n    return res.status(400).json({ mensaje: \"Algo salió mal!\", success: false })\r\n  }\r\n}\r\n\r\nexport const approveUserEmail = async ( req, res ) => {\r\n  try{\r\n    res.status(301).json({mensaje: \"mail to send\"})\r\n  } catch( error ) {\r\n    console.log( error );\r\n    return res.status(400).json({ mensaje: \"Algo salió mal\", success: false })\r\n  }\r\n}\r\n// verify to createuser email\r\nexport const verifyEmail = async ( req, res ) => {\r\n  try{\r\n    let { userId, uniqueString } = req.params;\r\n\r\n    //console.log(\"verificationStatus\", verificationOption)\r\n\r\n    const tokenByUserId = await db.Token.unscoped().findAll({ attributes: [ 'token_uniqueString', 'token_expiredAt', 'user_id' ], where: { user_id: userId }})\r\n    if(tokenByUserId){\r\n      // user verification record exists so we proceed\r\n      const token_expiredAt = tokenByUserId[0].token_expiredAt\r\n      const hashedUniqueString = tokenByUserId[0].token_uniqueString;\r\n      const userId = tokenByUserId[0].user_id\r\n      \r\n        // cheking for expired\r\n\r\n        if( token_expiredAt < new Date() ){\r\n          // record has expired so we delete it \r\n          const deletedVerificationToken = await db.Token.destroy({ where: { user_id: userId } });\r\n          if(deletedVerificationToken){\r\n            const deletedUserNoValidated = await db.User.destroy({ where: { user_id: userId } });\r\n            if( deletedUserNoValidated ){\r\n              let message = \"Link has expired. Please sing up again\"\r\n              return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n            }else{               \r\n              let message = \"Clearing user with expired unique string failed\"\r\n              return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n            }\r\n\r\n          } else {\r\n            let message = \"An error ocurred while clearing expired user verification record\"\r\n            return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n          }\r\n        }else {\r\n          // valid record exist so we validate string\r\n          // first compare the hashed uniqued string\r\n          bcrypt\r\n            .compare(uniqueString, hashedUniqueString)\r\n            .then( async (result) => {\r\n              // strings match\r\n              if( result ){\r\n                const userUpdateVerification = await db.User.update({ user_verified: 1 }, { where: { user_id: userId } });\r\n                if( userUpdateVerification[0] ){\r\n                  const deletedVerificationToken = await db.Token.destroy({ where: { user_id: userId } });\r\n                  if(deletedVerificationToken){\r\n                    res.sendFile(path.join(__dirname, \"./../views/verified.html\"));\r\n                  }else {\r\n                    let message = \"An error ocurred while clearing expired user verification record\"\r\n                    return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n                  }\r\n                }else{\r\n                  let message = \"An error ocurred while comparing unique strings.\"\r\n                  return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n                }\r\n              }else{\r\n                // Existing record but incorrect verification detailes passed                    \r\n                let message = \"Invalid verification details passed. Check your inbox.\"\r\n                return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.log( error );\r\n              let message = \"An error ocurred while comparing unique strings.\"\r\n              return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n            })\r\n        }\r\n      } else {\r\n        let message = \"Account record doesn't exist or has been verified already. Please sing up or log in.\"\r\n        return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`);\r\n      }\r\n  } catch( error ) {\r\n    console.log( error );\r\n    return res.status(400).json({ mensaje: \"Algo salió mal\", success: false });\r\n  }\r\n}\r\n// verify to deletuser email\r\nexport const verifyToDeletedEmail = async ( req, res ) => {\r\n  try{\r\n    let { userId, uniqueString } = req.params;\r\n\r\n    const tokenByUserId = await db.Token.unscoped().findAll({ attributes: [ 'token_uniqueString', 'token_expiredAt', 'user_id' ], where: { user_id: userId }})\r\n    console.log(\"token to delete\", tokenByUserId, userId, uniqueString)\r\n    if(tokenByUserId){\r\n      // user verification record exists so we proceed\r\n      const token_expiredAt = tokenByUserId[0].token_expiredAt\r\n      const hashedUniqueString = tokenByUserId[0].token_uniqueString;\r\n      const userId = tokenByUserId[0].user_id\r\n      \r\n        // cheking for expired\r\n\r\n        if( token_expiredAt < new Date() ){\r\n          // record has expired so we delete it \r\n          const deletedVerificationToken = await db.Token.destroy({ where: { user_id: userId } });\r\n          if(deletedVerificationToken){            \r\n            let message = \"Link to delete has expired. Please Delet user again\"\r\n            return res.redirect(`/api/v1/data/email/verifyEmailToDelete/=true&message${message}`);\r\n          } else {\r\n            let message = \"An error ocurred while clearing expired user verification record\"\r\n            return res.redirect(`/api/v1/dataemail/verifyEmailToDelete/error=true&message${message}`)\r\n          }\r\n        }else {\r\n          // valid record exist so we validate string\r\n          // first compare the hashed uniqued string\r\n          bcrypt\r\n            .compare(uniqueString, hashedUniqueString)\r\n            .then( async (result) => {\r\n              // strings match\r\n              if( result ){\r\n                const deletedVerificationToken = await db.Token.destroy({ where: { user_id: userId } });\r\n                if( deletedVerificationToken ){\r\n                  const userDeleted = await db.User.destroy( { where: { user_id: userId } });\r\n                  if( userDeleted){\r\n                    res.sendFile(path.join(__dirname, \"./../views/verified_delete.html\"));\r\n                  }else {\r\n                    let message = \"An error ocurred while clearing expired user verification record\"\r\n                    return res.redirect(`/api/v1/data/email/verifyDeleteEmail/error=true&message${message}`)\r\n                  }\r\n                }else{\r\n                  let message = \"An error ocurred while comparing unique strings.\"\r\n                  return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n                }\r\n              }else{\r\n                // Existing record but incorrect verification detailes passed                    \r\n                let message = \"Invalid verification details passed. Check your inbox.\"\r\n                return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n              }\r\n            })\r\n            .catch((error) => {\r\n              console.log( error );\r\n              let message = \"An error ocurred while comparing unique strings.\"\r\n              return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`)\r\n            })\r\n        }\r\n      } else {\r\n        let message = \"Account record doesn't exist or has been verified already. Please sing up or log in.\"\r\n        return res.redirect(`/api/v1/data/email/verifyEmail/error=true&message${message}`);\r\n      }\r\n  } catch( error ) {\r\n    console.log( error );\r\n    return res.status(400).json({ mensaje: \"Algo salió mal\", success: false });\r\n  }\r\n}\r\n// update to forgotPsw email\r\nexport const updateToForgotPsw  = async ( req, res ) => {\r\n  try{\r\n    const { userId, passwordGenerated } = req.params;\r\n\r\n    const tokenByUserId = await db.Token.unscoped().findAll({ attributes: [ 'token_uniqueString', 'token_expiredAt', 'user_id' ], where: { user_id: userId }})\r\n    console.log(\"updareForgotPsw\", userId, passwordGenerated)\r\n    if(tokenByUserId){\r\n      // user verification record exists so we proceed\r\n      const token_expiredAt = tokenByUserId[0].token_expiredAt\r\n      const userId = tokenByUserId[0].user_id\r\n      \r\n        // cheking for expired\r\n        if( token_expiredAt < new Date() ){\r\n          // record has expired so we delete it \r\n          const deletedVerificationToken = await db.Token.destroy({ where: { user_id: userId } });\r\n          if(deletedVerificationToken){            \r\n            let message = \"Link to update ássword has expired. Please try again\"\r\n            return res.redirect(`/api/v1/data/email/forgotPswEmail/=true&message${message}`);\r\n          } else {\r\n            let message = \"An error ocurred while clearing expired user verification record\"\r\n            return res.redirect(`/api/v1/dataemail/forgotPswEmail/error=true&message${message}`)\r\n          }\r\n        }else {\r\n          // valid record exist so we validate string\r\n          // first compare the hashed uniqued string\r\n          const passwordGenerated = Math.random().toString(36).slice(-8);\r\n          const user_password = await db.User.encryptPassword(`${passwordGenerated}`);\r\n          const userUpdated = await db.User.update({user_password: user_password}, \r\n                                                   { where: { user_id: userId } })\r\n                .then( async (result) => {\r\n                  const deletedVerificationToken = await db.Token.destroy({ where: { user_id: userId } });\r\n                  console.log(\"destroyToken\", deletedVerificationToken)\r\n                  res.sendFile(path.join(__dirname, \"./../views/forgot_password.html\"));\r\n                })\r\n                .catch(error => {\r\n                  console.log(error);\r\n                  let message = \"An error ocurred while update password\"\r\n                  return res.redirect(`/api/v1/data/email/forgotPswEmail/error=true&message${message}`);\r\n                });\r\n          console.log(userUpdated)\r\n        }\r\n      } else {\r\n        let message = \"Account record doesn't exist or has been verified already. Please sing up or log in.\"\r\n        return res.redirect(`/api/v1/data/email/forgotPswEmail/error=true&message${message}`);\r\n      }\r\n  } catch( error ) {\r\n    console.log( error );\r\n    return res.status(400).json({ mensaje: \"Algo salió mal\", success: false });\r\n  }\r\n}\r\n\r\n// verify page route\r\nexport const verifyEmailPage = async ( req, res ) => {\r\n  res.sendFile(path.join(__dirname, \"./../views/verified.html\"));\r\n}\r\n// verify to delete page route\r\nexport const verifyEmailDeletePage = async ( req, res ) => {\r\n  res.sendFile(path.join(__dirname, \"./../views/verified_delete.html\"));\r\n}\r\n// forgot psw page route\r\nexport const forgotPswPage = async ( req, res ) => {\r\n  res.sendFile(path.join(__dirname, \"./../views/forgot_password.html\"));\r\n}\r\n\r\n// add  min to Date now\r\nfunction addMinutes(date, minutes) {\r\n  date.setMinutes(date.getMinutes() + minutes);\r\n\r\n  return date;\r\n}\r\n\r\n\r\n// Template configuration for sendEmail ( to use into emailController request )\r\n// const info = await transporter.sendMail({\r\n//   from: '\"FuturoCo Email Testing 👻\" <douglasskick17@mail.com>', // sender address\r\n//   to: \"douglasskick@gmail.com, jorgeluis_942009@hotmail.com, bssandovalrod@gmail.com\", // list of receivers\r\n//   subject: \"FuturoCo Bienvenido\", // Subject line\r\n//   text: \"Este es un correo de prueba, ignorar :p\", // use this or html for body\r\n//   html: \"<h3>Correo de Prueba</h3><br>Ignorar mensaje, wasaaaaa👻\", // use this or text for body\r\n// });"],"mappings":"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"}