{"version":3,"file":"user.controller.js","names":["_models","_interopRequireDefault","require","_verification","getUsers","req","res","data","db","User","findAll","attributes","exclude","include","model","Role","status","json","mensaje","success","error","exports","createUser","user_email","user_password","user_name","user_paternal_surname","user_maternal_surname","company_id","role_id","user_avatar","body","usuario","create","user_mail","encryptPassword","user_lastName","user_maternalLastName","user_verified","getUser","requestModels","query","split","includedModels","length","map","push","findByPk","params","id","updateUser","update","user_birthday","where","user_id","console","log","updatePasswordForgotten","userFound","findOne","email","passwordGenerated","Math","random","toString","slice","usersBycompany","recoverySenders","i","concat","sendVerificationEmail","deleteUser","adminId","admin"],"sources":["../../src/controllers/user.controller.js"],"sourcesContent":["import db from '../database/models';\r\nimport { sendVerificationEmail } from \"./../mail/utils/verification\";\r\n\r\nexport const getUsers = async (req, res) => {\r\n  try {\r\n    const data = await db.User.findAll({\r\n      attributes: { exclude: ['user_password'] },\r\n      include: [{ model: db.Role, attributes: ['role_name'] }]\r\n    });\r\n    res.status(200).json({ data, mensaje: 'Operación realizada con exito', success: true });\r\n  } catch (error) {\r\n    res.status(400).json({ mensaje: 'Ocurrio un error al consultar los datos', success: false });\r\n  }\r\n}\r\n\r\nexport const createUser = async (req, res) => {\r\n  try {\r\n    const { user_email, user_password, user_name, user_paternal_surname, user_maternal_surname, company_id, role_id, user_avatar } = req.body;\r\n    const usuario = await db.User.create({\r\n      user_mail: user_email,\r\n      user_password: await db.User.encryptPassword(user_password),\r\n      user_name,\r\n      user_lastName: user_paternal_surname,\r\n      user_maternalLastName: user_maternal_surname,\r\n      company_id,\r\n      role_id,\r\n      user_avatar,\r\n      user_verified: 0\r\n    });\r\n    res.status(201).json({ data: usuario, mensaje: 'Usuario agregado con exito', success: true });\r\n    if (usuario) {\r\n      // get user admin to verified email\r\n      // let admin = await db.User.findAll({ attributes: ['user_id', 'user_mail', 'user_name'], where: { user_mail: admin_mail } })\r\n      // sendVerificationEmail(usuario, 1, admin[0])\r\n      res.status(201).json({ data: usuario, mensaje: 'Usuario agregado con exito', success: true });\r\n    } else {\r\n      res.status(400).json({mensaje: 'Ocurrio un error al crear el usuario', success: false });\r\n    }\r\n  } catch (error) {\r\n    res.status(400).json({data:error, mensaje: 'Ocurrio un error al crear el usuario', success: false });\r\n  }\r\n}\r\n\r\nexport const getUser = async (req, res) => {\r\n  try {\r\n    let requestModels = req.query.include;\r\n    if (requestModels) requestModels = requestModels.split(',');\r\n    const includedModels = [{ model: db.Role, attributes: ['role_name'] }];\r\n    if (requestModels.length) requestModels.map(model => { includedModels.push({ model: db[model] }) });\r\n    const usuario = await db.User.findByPk(req.params.id, { attributes: { exclude: ['user_password'] }, include: includedModels });\r\n    if (usuario) {\r\n      res.status(200).json({ data: usuario, mensaje: 'Operación realizada con exito', success: true });\r\n    } else {\r\n      res.status(400).json({ mensaje: 'Usuario no encontrado', success: false });\r\n    }\r\n  } catch (error) {\r\n    res.status(400).json({data:error, mensaje: 'Ocurrio un error al consultar los datos', success: false });\r\n  }\r\n}\r\n\r\nexport const updateUser = async (req, res) => {\r\n  try {\r\n    const usuario = await db.User.update({\r\n      user_name: req.body.user_name,\r\n      user_lastName: req.body.user_lastName,\r\n      user_maternalLastName: req.body.user_maternalLastName,\r\n      user_birthday: req.body.user_birthday,\r\n      user_avatar: req.body.user_avatar\r\n    }, { where: { user_id: req.params.id } });\r\n    if (usuario[0]) {\r\n      res.status(200).json({ mensaje: 'Usuario actualizado con exito', success: true });\r\n    } else {\r\n      res.status(400).json({ mensaje: 'No existe el usuario', success: false });\r\n    }\r\n  } catch (error) {\r\n    console.log(error);\r\n    res.status(400).json({ mensaje: 'Ocurrio un error al actualizar los datos', success: false });\r\n  }\r\n}\r\n\r\nexport const updatePasswordForgotten = async (req, res) => {\r\n  try {\r\n    const userFound = await db.User.findOne({where: {user_mail: req.params.email}}, \r\n                                            { attributes: { exclude: ['user_paternal_surname', 'user_maternal_surname', 'user_avatar'] },});\r\n    if(userFound){\r\n      const passwordGenerated = Math.random().toString(36).slice(-8);\r\n      // Consultar admin de la companía a la que pertenece el usuario que va actualizar contraseña:\r\n      // console.log(\"userFound\", userFound.company_id)\r\n      const usersBycompany = await db.User.findAll({where: {company_id: userFound.company_id, role_id: 1}}, \r\n        { attributes: { exclude: ['user_paternal_surname', 'user_maternal_surname', 'user_avatar'] },});\r\n\r\n        // console.log(\"admins\",usersBycompany)\r\n\r\n        let recoverySenders = \"\"\r\n        for(let i=0; i<usersBycompany.length; i++){\r\n          recoverySenders = recoverySenders + `${usersBycompany[i].user_mail }, `;\r\n        }\r\n        //recoverySenders = recoverySenders + `${userFound.user_mail }, `;\r\n        sendVerificationEmail(userFound, 2, userFound.user_mail, passwordGenerated, recoverySenders);\r\n      // const user_password = await db.User.encryptPassword(`${passwordGenerated}`);\r\n      // const userUpdated = await db.User.update({\r\n        // user_password: user_password\r\n      // }, { where: { user_id: userFound.user_id } }); userUpdated[0]\r\n      if ( passwordGenerated ) {\r\n        res.status(200).json({ \r\n          mensaje: 'Se ha envíado un correo con la contraseña', passwordGenerated, success: true \r\n        });\r\n      } else {\r\n        res.status(400).json({ mensaje: 'No existe el usuario', success: false });\r\n      }\r\n    }\r\n  } catch (error) {\r\n    res.status(400).json({ mensaje: 'Ocurrio un error al actualizar los datos', success: false });\r\n  }\r\n}\r\n\r\nexport const deleteUser = async (req, res) => {\r\n  try {\r\n    const { id, adminId } = req.params;\r\n    // get adminInfo to deleted email\r\n    let admin = await db.User.findAll({ attributes: ['user_id', 'user_mail', 'user_name'], where: { user_id: adminId } });\r\n    // get userInfo to deleted email\r\n    let usuario = await db.User.findAll({ attributes: ['user_id', 'user_mail', 'user_name'], where: { user_id: id } });\r\n    if (usuario.length > 0 && admin.length > 0) {\r\n      sendVerificationEmail(usuario[0], 0, admin[0])\r\n      res.status(200).json({ mensaje: 'Se ha mandado la verificación para eliminar.', success: true });\r\n    } else {\r\n      res.status(400).json({ mensaje: 'No existe el usuario o alguno de los valores ingresados.', success: false });\r\n    }\r\n  } catch (error) {\r\n    res.status(400).json({ mensaje: 'Ocurrio un error al eliminar los datos', success: false });\r\n  }\r\n}"],"mappings":"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"}